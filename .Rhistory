textInput("text1","Enter your name"),
textInput("text2","Enter your nickname"),
actionButton("action","Update your nickname!"),
p("click on update to see updated name"),
mainPanel(
textOutput("text1"),
textOutput("text2")
)
)
))
shinyUI(fluidPage("A very simple example"),
sidebarLayout(
sidebarPanel(
textInput("text1","Enter your name"),
textInput("text2","Enter your nickname"),
actionButton("action","Update your nickname!"),
p("click on update to see updated name"),
mainPanel(
textOutput("txt1"),
textOutput("txt2")
)
)
))
runApp('C:/Users/18127/Desktop')
runApp('C:/Users/18127/Desktop')
shiny::runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server')
getwd()
list.files()
setwd()
runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server')
runApp('C:/Users/18127/Desktop/ui&server/ui')
runApp('C:/Users/18127/Desktop/ui&server/ui')
getwd
getwd()
runApp('ui')
install.packages(shiny)
runApp()
runApp('ui')
runExample("05_sliders")
library(shiny)
runExample()
runExample(05_sliders)
runExample("05_sliders")
runApp('C:/Users/18127/Desktop/ui&server/ui')
runApp('C:/Users/18127/Desktop/ui&server/ui')
runApp('C:/Users/18127/Desktop/ui&server/ui')
runApp('C:/Users/18127/Desktop/ui&server/ui')
runApp('C:/Users/18127/Desktop/ui&server/ui')
shiny::runApp('C:/Users/18127/Desktop/ui&server/slider options')
runApp('C:/Users/18127/Desktop/ui&server/slider options')
shinyServer(function(input,output){
output$out <- renderText(
paste("you selected the valUE AS:",input$slide))
})
shinyUI(fluidPage(
titlePanel("Demostration of sliderInput widget in shiny"),
sidebarLayout(
sidebarPanel(
sliderInput("slide", "Select the value from Slider", min = 0, max=5, value=c(2,4),animate = TRUE, step=0.2)
),
mainPanel(
textOutput("out")
)
)
))
runApp('C:/Users/18127/Desktop/ui&server/slider options')
shinyUI(fluidPage(
titlePanel("Drop down selection"),
sidebarLayout(
sidebarPanel(
selectInput("state","Select a state",c("Missorri","Indiana","Illinois","Ohio","Kentucky","Newyork","Florida","North Carolina") )
),
mainPanel()
)
))
runApp('C:/Users/18127/Desktop/ui&server/Select Input')
runApp('C:/Users/18127/Desktop/ui&server/Select Input')
runApp('C:/Users/18127/Desktop/ui&server/Select Input')
runApp('C:/Users/18127/Desktop/ui&server/Select Input')
runApp('C:/Users/18127/Desktop/ui&server/Select Input')
runApp('C:/Users/18127/Desktop/ui&server/Select Input')
runApp()
runApp('C:/Users/18127/Desktop/ui&server/renderplot')
NewUserRegistration <- c("Password","Name","UserId","Role")
server <- function(input, output, session) {
hideTab(inputId = "Navp", target = "Dash board")
hideTab(inputId = "Navp", target = "Analyst")
hideTab(inputId = "Navp", target = "Customer")
Logged = FALSE
############### New user  ################
# When the form data for new USERS
formData <- reactive({
data <- sapply(NewUserRegistration, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the New User form data to USERS table
table <- "USERS"
observeEvent(input$submit, {
saveData(formData())
updateNavlistPanel(session, "Navp", selected = "Login")
})
####### Save quesry for New user
saveData <- function(data) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
table,
paste(names(data), collapse = ", "),
paste(data, collapse = "', '")
)
# Submit the update query and disconnect
dbGetQuery(db, query)
dbDisconnect(db)
}
############### New Tests  Types ################
# When the form data for new tests
newTestFormData <- reactive({
newtestdata <- sapply(NewTestTypes, function(x) input[[x]])
newtestdata
})
# When the click on Save button in Add test Types in admin page save to TestTypes
table1 <- "TestTypes"
observeEvent(input$save, {
saveTestData(newTestFormData())
})
####### Save query for New tests
saveTestData <- function(newtestdata) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
table1,
paste(names(newtestdata), collapse = ", "),
paste(newtestdata, collapse = "', '")
)
# Submit the update query and disconnect
dbGetQuery(db, query)
dbDisconnect(db)
}
################ New Test Orders    ######################
# When the form data for test order
TestOrderFormData <- reactive({
orderdata <- sapply(NewTestOrder, function(x) input[[x]])
orderdata$RequestDate <- as.character(orderdata$RequestDate)
if (orderdata$TestName1 == "Glucose") {
orderdata$Test1 <- "Fasting"
orderdata$Test1Std <- "60 - 100 mg/dL"
orderdata$Test2 <- "Post-2Hrs"
orderdata$Test2Std <- "120 - 180 mg/dL"
}
if (orderdata$TestName1 == "Lipid Profile") {
orderdata$Test1 <- "Cholesterol"
orderdata$Test1Std <- "<200 mg/dL"
orderdata$Test2 <- "Triglycerides"
orderdata$Test2Std <- "<150 mg/dL"
orderdata$Test3 <- "HDL Cholesterol"
orderdata$Test3Std <- ">40 mg/dL"
orderdata$Test4 <- "LDL Calculated"
orderdata$Test4Std <- "<130 mg/dL"
}
orderdata
})
# When the order button is clicked, save the test order form data to TestResults table
ordertable <- "TestResults"
observeEvent(input$order, {
########### Validate whether user logged in or not###########
if (input$CustId =="None") {
output$CustInfo <- renderText({"Please login before ordering your tests. Thank you!!!!"})
return()
}
saveOrderData(TestOrderFormData())
})
####### Save query for test order
saveOrderData <- function(orderdata) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
ordertable,
paste(names(orderdata), collapse = ", "),
paste(orderdata, collapse = "', '")
)
############# Submit the update query and disconnect
dbGetQuery(db, query)
dbDisconnect(db)
############# Successfully order test message #######################
####     updateTextInput(session, "CustId", value = '')
output$CustInfo <- renderText({"You have successfully placed your tests. Thank you!!!!"})
return()
}
############## END Save Test Orders#######################
################## Cancel or clear ########################
observeEvent(input$cancel, {
updateTextInput(session, "Name", value = '')
updateTextInput(session, "UserId", value = '')
updateTextInput(session, "Password", value = '')
})
############################# Log in validation ################
USER <- reactiveValues(Logged = Logged)
inputdata <- reactive({
validate(need(isolate(input$userName) == "", "Please Enter User name"))
})
############# User Login #####################
observeEvent(input$Login, {
output$dataInfo <- renderText({""})
### Check if user already logged in
if (USER$Logged) {
output$dataInfo <- renderText(stop({"You have already logged in!!!!!!"}))
return()
}
#  Check if User Name & Password entered or not
if(input$userName == "" & input$passwd == "") {
output$dataInfo <- renderText({"Please check your credentials"})
return()
}
if(input$userName == "" ) {
output$dataInfo <- renderText({"Please check your User"})
return()
}
if(input$passwd == "") {
output$dataInfo <- renderText({"Please check your password"})
return()
}
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
query <- sprintf({"
SELECT UserId, Role
FROM USERS
WHERE UserId ='%s' and Password ='%s'"},
Username, Password, serialize=F)
db <- dbConnect(SQLite(), sqlitePath)
userrec <- dbGetQuery(db, query)
#  print(userrec)
dbDisconnect(db)
if (length(userrec$UserId) == 0 ) {
# print error/ warning message
output$dataInfo <- renderText({"If you are a new user please register before login OR Check your credentials"})
return()
} else {
if ( userrec$UserId == Username ) {
USER$Logged <- TRUE}
successInfo <- cbind ("You Have Successfully logged in as", Username)
output$HomeInfo <- renderText({successInfo})
output$CustInfo <- renderText({successInfo})
###     output$AnaInfo <- renderText({successInfo})
output$dataInfo <- renderText({""})   ##### Clear previous message
}
}
}
}
if (USER$Logged == TRUE)
{
######################### LOAD User Name in Customer tab ###############
###################################################
output$CustId <- renderUI({
selectInput("CustId", "Customer ID", userrec$UserId) })
########### Hide some Tabs when Login #######################
updateTextInput(session, "userName", value = '')
updateTextInput(session, "passwd", value = '')
if ( userrec$Role == "analyst" ) {
showTab(inputId = "Navp", target = "Dash board")
showTab(inputId = "Navp", target = "Analyst")
showTab(inputId = "Navp", target = "New User")
hideTab(inputId = "Navp", target = "Login")
#   hideTab(inputId = "Navp", target = "NewUser")
hideTab(inputId = "Navp", target = "Customer")
updateNavlistPanel(session, "Navp", selected = "Analyst")
}
if ( userrec$Role == "customer" ) {
showTab(inputId = "Navp", target = "Customer")
hideTab(inputId = "Navp", target = "Dash board")
hideTab(inputId = "Navp", target = "Analyst")
hideTab(inputId = "Navp", target = "Login")
hideTab(inputId = "Navp", target = "New User")
updateNavlistPanel(session, "Navp", selected = "Customer")}
}
})
################### Logout logic#####################
observeEvent(input$Logout, {
USER$Logged <- FALSE
hideTab(inputId = "Navp", target = "Customer")
hideTab(inputId = "Navp", target = "Analyst")
showTab(inputId = "Navp", target = "Login")
hideTab(inputId = "Navp", target = "Dash board")
showTab(inputId = "Navp", target = "New User")
updateTextInput(session, "userName", value = '')
updateTextInput(session, "passwd", value = '')
output$dataInfo <- renderText({""})
output$HomeInfo <- renderText({"You Have successfully Logged out"})
output$CustInfo <- renderText({""})
output$CustId <- renderUI({
selectInput("CustId", "Customer ID", "") })
updateNavlistPanel(session, "Navp", selected = "Home")
})
#####################Loaddata function
loadData <- function(fields, table, sortCol= '' , whereCls = ''){
if (whereCls == "")
query <- sprintf("SELECT %s FROM %s", fields, table)
else
query <- sprintf("SELECT %s FROM %s WHERE %s", fields, table, whereCls)
db <- dbConnect(SQLite(), sqlitePath)
dataDB <- dbGetQuery(db, query)
if(sortCol != "") dataDB[order(dataDB[sortCol]),]
else dataDB
dbDisconnect(db)
print(dataDB)
}
############Initiallize user if not logged in ###############
output$CustId <- renderUI({
selectInput("CustId", "Customer ID", "None") })
#############################################################
################# load Test Name in Customer tab
Listdata <- loadData("TestName", "TestTypes","TestName","")
#print(Listdata)
#Listdata<- rbind(data.frame("TestName" = ""), Listdata)
Testnamelist <- setNames(Listdata$TestName, Listdata$TestName)
output$TestName1 <- renderUI({
selectInput("TestName1", "Test Name: ", Testnamelist)
})
####### Lab Locations load data from database
Listdata1 <- loadData("LabLocation", "Location","LabLocation","")
# print(Listdata1)
LabLoclist <- setNames(Listdata1$LabLocation, Listdata1$LabLocation)
output$LabLocation1 <- renderUI({
selectInput("LabLocation1", "Lab: ", LabLoclist)
})
################ Data Table start###############################
###########################################################
###########################################################
observeEvent(input$displayResults, {
db <- dbConnect(SQLite(), sqlitePath)
datatb <- tbl(db, "TestResults")
datatb <- datatb %>% as.data.frame()
#TestResults <- filter(datatb,  (is.na(Test1Results) | Test1Results == 0))
TestResults <- datatb
output$Results <- renderDT(TestResults, options =
list(scrollX = TRUE), editable = TRUE)
#necessary code to replace data once edited
proxy1 = dataTableProxy('Results')
#print(proxy1)
####TestResults_rows <- which(datatb$ TestName1 != "")
TestResults_rows <- which(TestResults$TestName1 != "" | is.na(TestResults$TestName1) )
# print(TestResuts_rows)
observeEvent(input$Results_cell_edit, {
info = input$Results_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
############ get new value
new_value <- DT::coerceValue(v, TestResults[i, j])
############# update local copy of TestResuts
TestResults[i, j] <<- new_value
############# update local copy of data
datatb[TestResults_rows[i], j] <<- new_value
############# update browser
replaceData(proxy1, TestResults, resetPaging = TRUE)  # important
##### dbDisconnect(db)
})
observeEvent(input$action, {
dbWriteTable(db, "TestResults", data.frame(datatb), overwrite = TRUE)
})
### dbDisconnect(db)
})   ########### end of display results
################ end of Data Table ###############################
###########################################################
###########################################################
############   DashBoard ##############################
#dbDisconnect(db)
db <- dbConnect(SQLite(), sqlitePath)
testresultstabel <- tbl(db, "TestResults")
testresultstabel <- testresultstabel %>% as.data.frame()
################ initialize ##################
vals <- reactiveValues(MaxTestResultsbyType=NULL, TestResultsPerCustomer = NULL)
################ Value 1 ################################
Dashboarddata <- reactive({
Dashboarddata <- testresultstabel %>%
filter(LabLocation1 %in% input$LabLoc)
###   %>% filter(TestName1 %in% input$Ttype) %>%
###   filter(gender %in% input$Sex)
if(is.null(input$Sex))
return()
Dashboarddata
})
output$value1 <- renderValueBox({
valueBox(h4("Total Tests by Location:"),
formatC(count(Dashboarddata()), format="d", big.mark=','),
paste('Total Tests by Location:',count(Dashboarddata()))
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
################### Value 1 End #######################
################ Value 2 ################################
Dashboarddata2 <- reactive({
Dashboarddata2 <- testresultstabel %>%
filter(LabLocation1 %in% input$LabLoc) %>%
filter(TestName1 %in% input$Ttype)
if(is.null(input$Ttype))
return()
Dashboarddata2
})
output$value2 <- renderValueBox({
valueBox(h4("Total Tests by Test Type:"),
formatC(count(Dashboarddata2()), format="d", big.mark=','),
paste('Total Tests',count(Dashboarddata2()))
,icon = icon("stats",lib='glyphicon')
,color = "green")
})
################### Value 2 End #######################
################ Value 3 ################################
Dashboarddata3 <- reactive({
Dashboarddata3 <- testresultstabel %>%
filter(LabLocation1 %in% input$LabLoc)  %>%
filter(TestName1 %in% input$Ttype) %>%
filter(gender %in% input$Sex)
if(is.null(input$Sex))
return()
Dashboarddata3
})
output$value3 <- renderValueBox({
valueBox(h4("Total Tests by Gender:"),
formatC(count(Dashboarddata3()), format="d", big.mark=','),
paste('Total Tests by Gender:',count(Dashboarddata3()))
,icon = icon("stats",lib='glyphicon')
,color = "red")
})
################### Value 3 End #######################
################### Histogram - Max Results by Gender########################
#creating the plotOutput content
output$MaxTestResultsbyType <- renderPlot({
vals$MaxTestResultsbyType <-    ggplot(data =Dashboarddata2(),
aes(x=TestName1, y=Test1Results, fill=factor(gender))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Test Results") +
xlab("Test Name") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
labs(fill = "gender")
vals$MaxTestResultsbyType
})
###############
Dashboarddata4 <- reactive({
Dashboarddata4 <- testresultstabel %>%
filter(LabLocation1 %in% input$LabLoc) %>%
filter(TestName1 == "Lipid Profile")
if(is.null(input$Ttype))
return()
Dashboarddata4
})
output$TestResultsPerCustomer <- renderPlot({
##  vals$TestResultsPerCustomer <-   ggplot(data = testresultstabel,
##        aes(x=CustID, y=Test1Results, fill=factor(TestName1))) +
##   geom_bar(position = "dodge", stat = "identity", colour='yellow') + ylab("Test Results)") +
##   xlab("Customer") + theme(legend.position="bottom"
##                          ,plot.title = element_text(size=15, face="bold")) +
##   ggtitle("Test Results by Customer") + labs(fill = "Test Name")
vals$TestResultsPerCustomer <- ggplot(Dashboarddata4(),
aes(x = CustID, y = Test1Results,fill=factor(TestName1))) +
###  ggplot(Dashboarddata4(),
###        aes(x = CustID, y = Test1Results,fill=factor(TestName1))) +
geom_point(size = 5, stat = "identity") + ylab("Test Results") +
xlab("Customer") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Test Results by Customer") + labs(fill = "Test Name")
vals$TestResultsPerCustomer
})
############   End of DashBoard ##############################
##############################################################
###############  Download Dashboard ##########################
##############################################################
output$downloadReport <- downloadHandler(
filename = function() {
paste("downloadReport.pdf",sep="")},
content = function(file) {
pdf(file)
grid.arrange(vals$MaxTestResultsbyType, vals$TestResultsPerCustomer)
dev.off()
}
)
}
shiny::runApp('C:/Users/18127/Desktop/gg')
runApp('C:/Users/18127/Desktop/gg')
install.packages("rJava")
runApp('C:/Users/18127/Desktop/gg')
install.packages("gridExtra")
install.packages("rsconnect")
install.packages("here")
runApp('C:/Users/18127/Desktop/gg')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
install.packages("rJava")
runApp('C:/Users/18127/Desktop/gg')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
summary(cars)
a <- summary(cars)
print(a)
### deployApp()
shiny::runApp('gg')
runApp('~/Capstonefinaldb/capstonefinal.R')
runApp('~/gg')
